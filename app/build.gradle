apply plugin: 'com.android.application'
apply plugin: 'walle'
//apply from: 'tinkerpatch.gradle'

android {

    compileSdkVersion 26

    //recommend Tinker相关配置
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            keyAlias 'android'
            keyPassword '123456'
            storeFile file('store/aaa.jks')
            storePassword '123456'

        }
    }

    defaultConfig {
        applicationId "test.testwalle"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
//        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
        buildConfigField ("String", "BASE_URL", "\"http://m.laiyifen.com\"")

    }


    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['libs']
//        }
//    }
//    projectName - 项目名字
//    appName - App模块名字
//    packageName - applicationId (App包名packageName)
//    buildType - buildType (release/debug等)
//    channel - channel名称 (对应渠道打包中的渠道名字)
//    versionName - versionName (显示用的版本号)
//    versionCode - versionCode (内部版本号)
//    buildTime - buildTime (编译构建日期时间)
//    fileSHA1 - fileSHA1 (最终APK文件的SHA1哈希值)
//    flavorName - 编译构建 productFlavors 名

//    flavorDimensions 'product', 'version'
   /* flavorDimensions 'version'
    productFlavors {
        *//* aa {
             dimension 'product'
             buildConfigField ("String", "BASE_URL", "\"http://m.laiyifen.com\"")
         }
         bb {
             dimension 'product'
             buildConfigField ("String", "BASE_URL", "\"http://m.laiyifen.com\"")
         }*//*
        pro_release {
            dimension 'version'
            buildConfigField("String", "BASE_URL", "\"http://m.pro_release.com\"")
        }
        pro_dev {
            dimension 'version'
            buildConfigField("String", "BASE_URL", "\"http://m.pro_dev.com\"")
        }
    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.meituan.android.walle:library:1.1.3'
    // 多dex 打包的类库
    implementation 'com.android.support:multidex:1.0.1'
    //tinker的核心库
//    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //用于生成application类
//    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
//    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

